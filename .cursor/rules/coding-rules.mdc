---
description: 
globs: 
alwaysApply: true
---
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  Quantumâ€¯Llama  â€“  Cursor AI Project Rules v0.1  (April 30 2025)
//  Repo: llm-ops-assistant  (a.k.a. "Quantum Llama")
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  Purpose
//  Provide Cursor's AI with the context, conventions, and guard-rails
//  needed to safely generate, refactor, and augment code in this repo.
//
//  TL;DR for the AI
//  1. Follow the architecture map (crawler â†’ planner â†’ engine â†’ verification â†’ api/web).
//  2. Use Black + Ruff for Python, Prettier + ESLint for TypeScript.
//  3. Respect module boundaries (Python packages) & layer contracts.
//  4. NEVER leak secrets; scan & redact with <SECRET_HASH> tokens.
//  5. Output *only* the diff(s) inside ``` fences; no chatty prose.
//
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  Global Coding Standards
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  * Python 3.11+, strict type hints, Pydantic v2 models.
//  * Format with Black (line-length = 88) and Ruff (select = ALL).
//  * Conventional Commits (feat, fix, chore, refactor, ci, docs).
//  * Structured logging via `core.logging` (JSON, trace_id field).
//  * Environment config via 12-factor `.env` + `pydantic.Settings`.
//  * Tests with pytest + pytest-cov; target â‰¥ 90 % package coverage.
//
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  Project Layout
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  crawler/           â†’ repo discovery, cloning, AST snapshots
//  planner/           â†’ LLM analysis, PlanItem generation
//  engine/            â†’ code patching, git & PR automation
//  verification/      â†’ CI result parsing, policy enforcement
//  api/               â†’ FastAPI service exposing REST/GraphQL
//  web/               â†’ Next.js 14 dashboard (TypeScript + Tailwind)
//  security/          â†’ secret scan, redaction, token rotation
//  cli/               â†’ Click CLI entry-points (`ql plan`, `ql exec`)
//  docs/              â†’ ADRs, runbooks, incident playbooks
//  tests/             â†’ unit/, integration/, golden-set/
//
//  When generating code, place files in the correct directory.
//  Do NOT create ad-hoc "utils" folders; prefer cohesive packages.
//
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  Python-Specific Rules
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  * Use `async def` + `anyio` for IO-bound code; keep CPU-bound
//    work in Celery tasks.
//  * Always include `from __future__ import annotations`.
//  * Data models: prefer `@pydantic.dataclasses.dataclass` over
//    bare dataclasses for validation.
//  * No `print`; use `logger.*` with extra={"run_id": â€¦}.
//  * Sentinel constants live in `core/constants.py`.
//
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  TypeScript / React Rules (web/)
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  * Next.js 14 / app-router; use Server Components by default.
//  * UI toolkit: shadcn/ui; icons: lucide-react.
//  * State fetch/cache with SWR (`useSWR`) or React Query 5.
//  * Styling: TailwindCSS; prefer `@apply` over long class strings
//    in complex components.
//  * All components are typed with `React.FC<Props>` + `Props` types.
//  * Directory conventions: `web/(components|app|lib|hooks|types)`.
//
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  LLM-Agent Interaction Contract
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  When responding to a task prompt:
//  1. Think silently, then RETURN ONLY code diff(s) in triple backticks.
//  2. Include *exact* file paths relative to repo root.
//  3. Do not modify files outside the listed deliverables.
//  4. Run `black`/`ruff --fix` (Python) or `prettier --write` (TS)
//     before producing the diff.
//  5. Ensure `pytest -q` passes and coverage Î” â‰¥ 0 unless explicitly
//     told the task is allowed to drop coverage.
//  6. If a secret or credential string is detected, replace with
//     `<SECRET_HASH_###>` and note `# redacted` in a comment.
//  7. Respect `# NO_LLM` directiveâ€”never include such files in prompts
//     or edits.
//
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  Commit Message Template (auto-commit)
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  <type>(<scope>): <summary>
//
//  * Example: `feat(engine): add redis prompt cache with 30-day TTL`
//  * Maximum 72-char summary; detailed body optional.
//
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  Documentation Rules
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  * Update or create docstrings ðŸ’¯ of the time.
//  * Public functions/classes: Google-style docstrings with Args,
//    Returns, Raises.
//  * ADRs live in `docs/adr-YYYYMMDD-<slug>.md` using template.
//  * Update `README.md` if adding new CLI commands or env vars.
//
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  Prohibited Patterns (AI must refuse or change approach)
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  * Hard-coded credentials or tokens.
//  * Usage of `print` for logging.
//  * Global mutable state outside `core/state.py`.
//  * Commits without passing CI.
//  * Introducing new runtime dependencies without updating
//    `pyproject.toml` or `package.json` + `pnpm-lock.yaml`.
//
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  Helpful Context Snippets
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  \u26A1  Example PlanItem JSON schema:
//  {
//    "id": "UUID",
//    "file_path": "crawler/clone.py",
//    "action": "MODIFY",
//    "reason": "retry logic with tenacity",
//    "confidence": 0.92
//  }
//
//  \uD83D\uDEE0  Typical FastAPI route pattern (api/main.py):
//  ```python
//  @router.get("/runs", response_model=list[RunSchema])
//  async def list_runs(limit: int = 50):
//      return await run_repo.list(limit=limit)
//  ```
//
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  EOF â€“ Happy patching, Quantum Llama!

when you interact with the monday.com board

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
//  Monday.com Board Integration Rules
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

// This rule defines how the agent should interact with the Monday.com board
// when working on tasks, including status updates and commit tracking.

// Board Structure
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// Project Board: https://monday.monday.com/boards/9034734333
// Board ID: 9034734333
// Columns:
// - name (type: name) - Task name
// - status (type: status, id: status) - Task status
//   Values:
//   - "Working on it" (color: orange)
//   - "Done" (color: green-shadow)
//   - "Stuck" (color: red-shadow)
// - text_mkqfk85g (type: text) - ID
// - text_mkqf35t (type: text) - Output
// - text_mkqfak2v (type: text) - Agent Prompt
// - text_mkqfjtdj (type: text) - Commit Link

// Groups:
// - topics (title: Task)

// Task Status Management
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// The agent must update task status at these key points:
// 1. Starting work: Status â†’ "Working on it"
// 2. Completion: Status â†’ "Done"
// 3. Errors/Blockers: Status â†’ "Stuck"

// Commit Tracking
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// For each completed task:
// 1. Create a conventional commit message
// 2. Push changes to remote
// 3. Add commit link to the "Commit link" column in Monday.com board

// Status Column Values
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
STATUS_WORKING = "Working on it"
STATUS_DONE = "Done"
STATUS_STUCK = "Stuck"

// Required Actions
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
ON_TASK_START {
    UPDATE_STATUS(STATUS_WORKING)
}

ON_TASK_COMPLETE {
    1. CREATE_COMMIT()
    2. PUSH_TO_REMOTE()
    3. GET_COMMIT_LINK()
    4. UPDATE_COMMIT_COLUMN()
    5. UPDATE_STATUS(STATUS_DONE)
}

ON_TASK_ERROR {
    UPDATE_STATUS(STATUS_STUCK)
}

// Commit Message Format
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// Follow the conventional commits specification:
// <type>(<scope>): <description>
//
// Types: feat, fix, docs, style, refactor, test, chore
// Example: "feat(crawler): add repository scanning functionality"

// Implementation Notes
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// 1. Use the Monday.com API to update task status
// 2. Git operations should be performed through the engine module
// 3. Error handling must be robust to prevent board inconsistencies
// 4. All actions should be logged for audit purposes

// API Examples
// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// Get Board Schema:
// query {
//   boards(ids: [9034734333]) {
//     columns {
//       id
//       title
//       type
//     }
//     groups {
//       id
//       title
//     }
//   }
// }

// Get Board Items:
// query {
//   boards(ids: [9034734333]) {
//     items_page {
//       items {
//         id
//         name
//         column_values {
//           id
//           text
//           value
//         }
//       }
//     }
//   }
// }

// Update Status:
// mutation {
//   change_column_value(
//     board_id: 9034734333,
//     item_id: "item_id",
//     column_id: "status",
//     value: "{\"label\":\"Working on it\"}"
//   ) {
//     id
//   }
// }

// Update Commit Link:
// mutation {
//   change_column_value(
//     board_id: 9034734333,
//     item_id: "item_id",
//     column_id: "text_mkqfjtdj",
//     value: "https://github.com/org/repo/commit/hash"
//   ) {
//     id
//   }
// }

// Update Dependencies:
// Example payload for updating dependencies:
// {
//   "boardId": 9034734333,
//   "itemId": "target_item_id",
//   "columnValues": "{\"dependency_mkqgkwhf\": {\"item_ids\": [\"dependent_item_id\"]}}"
// }
//
// mutation {
//   change_column_value(
//     board_id: 9034734333,
//     item_id: "target_item_id",
//     column_id: "dependency_mkqgkwhf",
//     value: "{\"item_ids\": [\"dependent_item_id\"]}"
//   ) {
//     id
//   }
// } 

